Purpose of One-to-One Relationship  
One-to-One ka matlab hota hai: "Ek Comment sirf ek User se linked ho" aur vice versa.

Example JSON:
{
  "title": "I can't believe it!",
  "content": "I put all my money in Palantir!",
   "createdBy": "teddy"
  }
}
Yahan ek comment hai jo sirf ek user teddy se linked hai.

Steps to Implement One-to-One Relationship

Step 1: Comment model update
public string AppUserId { get; set; }  // FK
public AppUser AppUser { get; set; }   // navigation prop

Step 2: run migrations 

dotnet ef migrations add CommentOneToOne

or console package manager


Add-Migration CommentOneToOne


------------------------------------------------------------------
now we want to show  like this: to show comment created by which user we need to do this
{
  "title": "I can't believe it!",
  "content": "I put all my money in Palantir!",
   "createdBy": "teddy"
  }
}

-> get user from identity
-> put it in comment model 
->save 


step 1: in CommentController.cs inject UserManager<AppUser> userManager

step 2: in CreateComment method
          var userName = User.GetUsername();
            var appUser = await _userManager.FindByNameAsync(userName);
            var newComment = createDto.ToCommentFromCreateDto(stockId);
            newComment.AppUserId = appUser.Id; // set the AppUserId from the authenticated user

-> we ensuring that user also saviing before creating comment 

step 3: in Comment repository
            return await context.Comments.Include(a => a.AppUser).ToListAsync(); replace wexisting one with this in getall

            also in get by id
            return await context.Comments.Include(a => a.AppUser).FirstOrDefaultAsync(x => x.Id == id);

---------------------------------------------------------
now we want in stocks

{
    "id": 1,
    "symbol": "AAPL",
    "companyName": "Apple Inc.",
    "purchase": 50,
    "lastDiv": 0.82,
    "industry": "Technology",
    "marketCap": 3200000000,
    "comments": [
      {
        "id": 1,
        "title": "string",
        "content": "string",
        "createdOn": "2025-08-02T03:23:31.2382232",
        "stockId": 1
      },
   createdBy:{           -> we want this in stock

   }
    ]
  }

  -> we use thenInclude - because  we already use include 
  step 1: in StockRepository 
  add .ThenInclude(c => c.AppUser) in GetAllAsync method
  check StockRepository.cs for details

 step 2: in CommentDto.cs
 public string CreatedBy { get; set; } = string.Empty; // add this property to hold the username

 step 3: in CommentDtoMapper.cs
 public static CommentDto ToCommentDto(this Comment comment)
 {
     return new CommentDto
     {
         Id = comment.Id,
         Title = comment.Title,
         Content = comment.Content,
         CreatedOn = comment.CreatedOn,
         StockId = comment.StockId,
         CreatedBy = comment.AppUser.UserName // set the CreatedBy property from AppUser
     };
 }


 step 4: add migrations
 step 5: update database

